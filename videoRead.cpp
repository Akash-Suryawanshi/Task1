#include <iostream>
#include "header.h"
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"

#include <opencv2/core/core.hpp>
#include <opencv2/video/background_segm.hpp>

using namespace std;
using namespace cv;

void readVideo(string x) {
	VideoCapture cap(x);
	Mat fgMaskMOG2; //fg mask generated by MOG2 method
	Ptr<BackgroundSubtractor>pKNN; // MOG2 background subtractor
	pKNN = createBackgroundSubtractorKNN(); // background subtractor objects
	
	if (!cap.isOpened()) return;

	vector<vector<Point>> contours;
	vector<Vec4i> hierarchy;
	vector<double> contourAreas;	// countour areas per frame
	while (1) {
		Mat frame; // current frame
		cap >> frame;

		if (frame.empty()) {
			break;
		}
		pKNN->apply(frame, fgMaskMOG2);
		Mat transform = transform_and_crop(fgMaskMOG2);
		imshow("FG MASK", transform);

		findContours(transform, contours, hierarchy, RETR_TREE, CHAIN_APPROX_SIMPLE);

		//imshow("Image", transform);
		char c = (char)waitKey(25);
		if (c == 27) {
			break;
		}

	}
	cap.release();
	destroyAllWindows();
	
	//for (auto c : contours) {
	//	//cout << "Area of contour: " << contourArea(c) << endl;
	//	contourAreas.push_back(contourArea(c));
	//}
	//for (auto c : contourAreas) {
	//	cout << c << endl;
	//}

	return;
}